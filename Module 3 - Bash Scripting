EMBEDUR intern Training program

Spoken Tutorial - Bash scripting

Module 3

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Introduction to Bash

1) Write a simple Bash shell script to display the message "Welcome to Bash learning" and "***************" on separate lines. 

Command => echo "Welcome to Bash learning\n"
           echo "***************"

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Basics of Shell Scripting

1) Write a simple Bash program to get the following system variables:
    a. pwd
    b. logname

Command => pwd
           logname

2) Write a simple Bash program:
     a. To ask username from user
     b. Exit the program, if user does not enter anything within 10 seconds

Script =>  read -t 10 -p "Type Your Username : " username
           echo "$username"

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Command Line arguments and Quoting

1) Write a bash program for addition using command line arguments.

Script => if [ "$#" -ne 2 ]; then
          echo "Usage: $0 <num1> <num2>"
          exit 1
          fi
          num1="$1"
          num2="$2"
          sum=$((num1 + num2))
          echo "Sum: $sum"

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Globbing and Export statement

1) Write a Bash script to do all operations discussed under Globbing

Script => touch file1.txt file2.txt file3.txt
          mkdir dir1 dir2
          echo "List of files in the current directory:"
          for file in *
          do
            echo "$file"
          done
          echo "List of text files in the current directory:"
          for txtfile in *.txt
          do
              echo "$txtfile"
          done
          echo "Copying all text files to 'backup' directory:"
          mkdir backup
          cp *.txt backup/
          echo "Removing all directories:"
          rm -r dir1 dir2
          echo "Cleaning up sample files:"
          rm *.txt

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Array Operations in BASH

 1) Declare an Array names of length 7 and find
    a. The total number of elements
    b. Print all the elements
    c. Print the 5th element

Script =>  names=("Warren" "Buffet" "Ray" "Dalio" "Steve" "Wozniak" "AJithKumar")
           echo "${names[@]}"
           for name in "${names[@]}"
           do
              echo "$name"
           done
           echo "${names[4]}"

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

More on arrays

1) Declare an Array names2 of length 7 and perform following operations-
    a. Extract three elements starting from index two. 
    b. Replace third element with 'Debian' and display.
    c. Append any new name at the end of Array.

Script =>  names=("Warren" "Buffet" "Ray" "Dalio" "Steve" "Wozniak" "AJithKumar")
           echo "${names[@]:2:3}"
           names[2]="Debian"
           echo "${names[@]}"
           names2=("${names[@]}" "Kushi" "Anton")
           echo "${names[@]}"

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Conditional execution

1) Write a script which will take your name as an input.
2) It should check this name with your system's username.
3) If the username matches, it should greet you by displaying "Hello".
4) Else, it should display "Try again"
HINT: Your system's username is stored in a variable $USER 

Script => read -p "Your Name " Name
          if [ "$Name" == $USER ]; then
              echo "Hello $Name"
          else
              echo "Try Again!"
          fi

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Nested and multilevel if elsif statements

1) Write a program to output different messages when number is:
   a. Greater than 3
   b. Lesser than 3
   c. Or equal to 3
   d. Or when the user input is empty

Script => read -p "Enter a number: " usernumber
          if [[ -z "$input" ]]; then
              echo "The input is empty."
          else
              if [[ "$userinput" -gt 3 ]]; then
                  echo "The number is greater than 3."
              elif [[ "$userinput" -lt 3 ]]; then
                  echo "The number is lesser than 3."
              else
                  echo "The number is equal to 3."
              fi
          fi

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
